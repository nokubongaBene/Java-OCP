/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package topic3;

/**
 *
 * @author Benedicta
 */
public interface genericInterface {
    void obj(A tObj);
}


package topic3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
/**
 *
 * @author Benedicta
 */
//generic class
 class A<T, U> 
{ 
    T tObject;  // An object of type T 
    U uObject;  // An object of type U 
  
    // constructor 
    A(T obj1, U obj2) 
    { 
        this.tObject = obj1; 
        this.uObject = obj2; 
    } 
  
    // To print objects of T and U 
    public void print() 
    { 
        System.out.println(tObject); 
        System.out.println(uObject); 
    } 
}  
class Boolean{
         int num1;
        int num2;
        public Boolean(){
           num1 = 9;
           num2 = 8;
        }
        public boolean BooleanRe(){
            if(num1 > num2)
                return true;
            else
                return false;
        }
    }
class Movie implements Comparable<Movie> 
{ 
    private double rating; 
    private String name; 
    private int year; 
  
    // Used to sort movies by year 
    public int compareTo(Movie m) 
    { 
        return this.year - m.year; 
    } 
  
    // Constructor 
    public Movie(String nm, double rt, int yr) 
    { 
        this.name = nm; 
        this.rating = rt; 
        this.year = yr; 
    } 
  
    // Getter methods for accessing private data 
    public double getRating() { return rating; } 
    public String getName()   {  return name; } 
    public int getYear()      {  return year;  } 
} 
public class Topic3 {

    /**
     * @param args the command line arguments
     */
    // A Generic method 
    public static <T> void genericDisplay (T element) 
    { 
        System.out.println(element.getClass().getName() + 
                           " = " + element); 
    } 
     private static void printDragons(List<A> dragons) {
         for (A dragon: dragons) { 
             System.out.println(dragon);  
         } 
     } 
    public static void main(String[] args) {
        //using array and arraylist
         List<String> listNames = new ArrayList<>();
        
        listNames.add("Nokubonga");
        listNames.add("James");
        listNames.add("Sizwe");
        listNames.add("Tessa");
        listNames.add("Lisa");
        //Displaying from the Array List
        for(int i=0; i< listNames.size(); i++){
           System.out.println(listNames.get(i));
        }
        //Searching through the Array list
        String search = "a";
        for(String str: listNames) {
            if(str.trim().contains(search))
            System.out.println("there is an A in the array list");
            else
                System.out.println("No letter A found");
        }
        
        String[] arraySurname = {"Smith", "Mandela", "Zulu", "Adams", "Mabe"};
        //Sorting and displaying the sorted Array
        for(int j=0; j<arraySurname.length; j++){
            Arrays.sort(arraySurname);
            //Sorting the array of surname
            System.out.println(arraySurname[j]);
        }
        
        // Calling generic method with Integer argument 
        genericDisplay(11); 
   
        // Calling generic method with String argument 
        genericDisplay("Hello Benedicta using Generic Method"); 
        
        //testing the generic class
        A <String, Integer> obj = 
            new A<String, Integer>("Benedicta Nkambule", 85); 
  
        obj.print();
        
        //Wrapping classes
        Boolean bool = new Boolean();
        System.out.println(bool.BooleanRe());
        
        
         ArrayList<Movie> list = new ArrayList<Movie>(); 
        list.add(new Movie("Force Awakens", 8.3, 2015)); 
        list.add(new Movie("Star Wars", 8.7, 1977)); 
        list.add(new Movie("Empire Strikes Back", 8.8, 1980)); 
        list.add(new Movie("Return of the Jedi", 8.4, 1983)); 
  
        Collections.sort(list); 
  
        System.out.println("Movies after sorting : "); 
        for (Movie movie: list) 
        { 
            System.out.println(movie.getName() + " " + 
                               movie.getRating() + " " + 
                               movie.getYear()); 
        }
        
        // Set deonstration using HashSet 
        Set<String> hash_Set = new HashSet<String>(); 
        hash_Set.add("Geeks"); 
        hash_Set.add("For"); 
        hash_Set.add("Geeks"); 
        hash_Set.add("Example"); 
        hash_Set.add("Set"); 
        System.out.print("Set output without the duplicates"); 
  
        System.out.println(hash_Set); 
  
        // Set deonstration using TreeSet 
        System.out.print("Sorted Set after passing into TreeSet"); 
        Set<String> tree_Set = new TreeSet<String>(hash_Set); 
        System.out.println(tree_Set); 
   
    }
    
    
    
}
